{"version":3,"sources":["webpack:///./components/temperatureToColor.tsx","webpack:///./components/TemperatureChart/SVGGenerator.tsx","webpack:///./components/TemperatureChart/SeriesElement.tsx","webpack:///./components/TemperatureChart/Component.tsx","webpack:///./components/TemperatureChart/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","temperatureToColor","_material_ui_core_colors_amber__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_colors_amber__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_1___default","_material_ui_core_colors_deepOrange__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_colors_deepOrange__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_colors_green__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_colors_green__WEBPACK_IMPORTED_MODULE_3___default","shade","Math","round","val","min","max","a","b","floor","slotTemperature","MIN_DATE","Date","MAX_DATE","SVGGenerator_SVGGenerator","[object Object]","rootElement","showLegend","width","height","this","tickFormat","margin","top","right","bottom","left","series","minTime","maxTime","clientHeight","clientWidth","Object","Translation","initAxis","createChart","data","allData","select","selectAll","start","taskName","end","timeslot","enter","insert","attr","color","xScale","yScale","bandwidth","text","fixedDigits","temperature","dotme","exit","remove","d3","domain","range","clamp","rangeRound","padding","xAxis","tickSize","tickPadding","yAxis","textNode","each","parseInt","length","value","digits","pow","toFixed","init","svg","empty","append","call","translateDay","day","model","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","SeriesElement_SeriesElement","from","to","targetTemperature","setHours","hour","minute","index","Component","styles","theme","chart","spacing","unit","& .axis domain","fill","palette","primary","& text","fontSize","props","classes","plan","legend","ref","react_default","createRef","setRef","dimensions","useState","setDimensions","updateDimensions","inner","useEffect","func","savedRef","lodash","window","addEventListener","removeEventListener","useDimensions","current","tasks","forEach","schedules","last","calculateDay","assign","schedule","push","fullDay","previous","firstHalf","createElement","style","className"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,KAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,IAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAAM,EAAAG,GAAAE,EAAAX,EAAA,KAAAY,EAAAZ,EAAAM,EAAAK,GAiBO,MAAMR,EAAsBG,IAE/B,MAAMO,EAAQC,KAAKC,MAGP,IAjBT,SAAyBC,EAAaC,EAAaC,EAAaC,EAAWC,GAK9E,OAAON,KAAKO,OACLD,EAAID,IAAMH,EAAMC,IAClBC,EAAMD,GACLE,GAMmBG,CACrBR,KAAKG,IAAIH,KAAKI,IAAI,GAAIZ,GAAI,IAC1B,GAAI,GACJ,EAAG,GAAW,KAElB,OAAIA,GAAK,GACEE,EAAAW,EAAKN,GAGZP,GAAK,KACEM,EAAAO,EAAMN,GAGbP,GAAK,KACED,EAAAc,EAAMN,GAGVH,EAAAS,EAAWN,6HC3Bf,MAAMU,EAAW,IAAIC,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAC1CC,EAAW,IAAID,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAEhD,MAAME,EAuBTC,YACYC,EAAkCC,GAAa,EACvDC,EAAgBC,GADRC,KAAAJ,cAAkCI,KAAAH,aAvBvCG,KAAAC,WAAqB,QACrBD,KAAAE,OAAS,CACZC,IAAK,EACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAeFN,KAAAO,OAAmB,GAKvBP,KAAKQ,QAAUjB,EACfS,KAAKS,QAAUhB,EAEVO,KAAKH,aACNG,KAAKE,OAAS,CACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,IAIdN,KAAKD,QAAUA,GAAkBH,EAAYc,cAAgBV,KAAKE,OAAOC,IAAMH,KAAKE,OAAOG,OAC3FL,KAAKF,OAASA,GAAgBF,EAAYe,aAAe,GAAKX,KAAKE,OAAOE,MAAQJ,KAAKE,OAAOI,KAE9FN,KAAKO,OAAS,CACVK,OAAAC,EAAA,EAAAD,CAAU,mBACVA,OAAAC,EAAA,EAAAD,CAAU,oBACVA,OAAAC,EAAA,EAAAD,CAAU,sBACVA,OAAAC,EAAA,EAAAD,CAAU,qBACVA,OAAAC,EAAA,EAAAD,CAAU,mBACVA,OAAAC,EAAA,EAAAD,CAAU,qBACVA,OAAAC,EAAA,EAAAD,CAAU,oBAGdZ,KAAKc,WACLd,KAAKe,aAAY,GAGdpB,KAAKqB,GACR,MAGMC,EAHMjB,KAAKe,aAAY,GACXG,OAAO,UAEHC,UAAU,KAAKH,KAEjCA,EAAO/C,GAAqBA,EAAEmD,MAAQnD,EAAEoD,SAAWpD,EAAEqD,KAEnDC,EAAWN,EAAQO,QACpBC,OAAO,KACPC,KAAK,OAASzD,GAAqBA,EAAE0D,OACrCD,KAAK,YAAczD,GAAqB,aAAe+B,KAAK4B,OAAO3D,EAAEmD,OAAS,IAAMpB,KAAK6B,OAAO5D,EAAEoD,UAAY,KAQnH,GANAE,EAASE,OAAO,QACXC,KAAK,SAAU1B,KAAK6B,OAAOC,WAC3BJ,KAAK,QAAUzD,GACLa,KAAKI,IAAI,EAAIc,KAAK4B,OAAO3D,EAAEqD,KAAOtB,KAAK4B,OAAO3D,EAAEmD,SAG3DpB,KAAKH,WAAY,CACjB,MAAMkC,EAAOR,EAASE,OAAO,QACxBC,KAAK,cAAe,SACpBA,KAAK,IAAK,GACVA,KAAK,IAAK,IACVA,KAAK,QAAUzD,GACLa,KAAKI,IAAI,EAAIc,KAAK4B,OAAO3D,EAAEqD,KAAOtB,KAAK4B,OAAO3D,EAAEmD,OAAS,IAEnEW,KAAM9D,GAAqB+B,KAAKgC,YAAY/D,EAAEgE,YAAa,IAEhEjC,KAAKkC,MAAMH,GAEfd,EAAQkB,OAAOC,SAGXzC,WACJK,KAAK4B,OAASS,EAAA,IACTC,OAAO,CAACtC,KAAKQ,QAASR,KAAKS,UAC3B8B,MAAM,CAAC,EAAGvC,KAAKF,QACf0C,OAAM,GAEXxC,KAAK6B,OAASQ,EAAA,IACTC,OAAOtC,KAAKO,QACZkC,WAAW,CAAC,EAAGzC,KAAKD,OAASC,KAAKE,OAAOC,IAAMH,KAAKE,OAAOG,SAC3DqC,QAAQ1C,KAAKH,WAAa,GAAK,GAEpCG,KAAK2C,MAAQN,EAAA,EAAcrC,KAAK4B,QAE3B3B,WAAWoC,EAAA,EAAcrC,KAAKC,aAC9B2C,SAAS5C,KAAKH,WAAa,EAAI,GAC/BgD,YAAY7C,KAAKH,WAAa,EAAI,GAEvCG,KAAK8C,MAAQT,EAAA,EACCrC,KAAK6B,QACdgB,YAAY7C,KAAKH,WAAa,EAAI,GAClC+C,SAAS,GAGVjD,MAAMoD,GACVA,EAASC,KAAK,WAEV,MAAMjB,EAAOM,EAAA,EAAUrC,MACjBF,EAAQmD,SAASlB,EAAKL,KAAK,SAAU,IAElB,KAArBK,EAAKA,OAAOmB,OAAwCpD,GACpDiC,EAAKA,KAAK,MAKdpC,YAAYwD,EAAeC,GAC/B,OAAQtE,KAAKC,MAAMoE,EAAQrE,KAAKuE,IAAI,GAAID,IAAWtE,KAAKuE,IAAI,GAAID,IAASE,QAAQF,GAG7EzD,YAAY4D,GAChB,IAAIC,EAAMnB,EAAA,EAAUrC,KAAKJ,aAAasB,OAAO,OA6B7C,OA5BIqC,GAAQC,EAAIpB,SAEZoB,EAAIC,WAEJD,EAAMnB,EAAA,EAAUrC,KAAKJ,aAChB8D,OAAO,OACPhC,KAAK,QAAS1B,KAAKF,MAAQE,KAAKE,OAAOI,KAAON,KAAKE,OAAOE,OAC1DsB,KAAK,SAAU1B,KAAKD,OAASC,KAAKE,OAAOC,IAAMH,KAAKE,OAAOG,SAE5DqD,OAAO,KACNhC,KAAK,QAAS,SACdA,KAAK,QAAS1B,KAAKF,MAAQE,KAAKE,OAAOI,KAAON,KAAKE,OAAOE,OAC1DsB,KAAK,SAAU1B,KAAKD,OAASC,KAAKE,OAAOC,IAAMH,KAAKE,OAAOG,QAC3DqB,KAAK,YAAa,aAAe1B,KAAKE,OAAOI,KAAO,KAAON,KAAKE,OAAOC,IAAM,KAE9EH,KAAKH,aACL2D,EAAIE,OAAO,KACNhC,KAAK,QAAS,UACdA,KAAK,YAAa,aAAe1B,KAAKE,OAAOI,KAAO,MAAQN,KAAKD,OAASC,KAAKE,OAAOC,IAAMH,KAAKE,OAAOG,QAAU,KAClHsD,KAAK3D,KAAK2C,OAEfa,EAAIE,OAAO,KACNhC,KAAK,QAAS,UACdA,KAAK,YAAa,aAAe1B,KAAKE,OAAOI,KAAO,QACpDqD,KAAK3D,KAAK8C,SAIhBU,GCpKf,MAAMI,EAAgBC,IAClB,OAAQA,GACJ,KAAKC,EAAA,EAAIC,OAAQ,OAAOnD,OAAAC,EAAA,EAAAD,CAAU,mBAClC,KAAKkD,EAAA,EAAIE,OAAQ,OAAOpD,OAAAC,EAAA,EAAAD,CAAU,mBAClC,KAAKkD,EAAA,EAAIG,QAAS,OAAOrD,OAAAC,EAAA,EAAAD,CAAU,oBACnC,KAAKkD,EAAA,EAAII,UAAW,OAAOtD,OAAAC,EAAA,EAAAD,CAAU,sBACrC,KAAKkD,EAAA,EAAIK,SAAU,OAAOvD,OAAAC,EAAA,EAAAD,CAAU,qBACpC,KAAKkD,EAAA,EAAIM,OAAQ,OAAOxD,OAAAC,EAAA,EAAAD,CAAU,mBAClC,KAAKkD,EAAA,EAAIO,SAAU,OAAOzD,OAAAC,EAAA,EAAAD,CAAU,qBACpC,QAAS,MAAO,OAIjB,MAAM0D,EA6BT3E,YAAY4E,EAAwBC,GARpBxE,KAAAoB,MAAQ,IAAI5B,KAAKD,GACjBS,KAAAsB,IAAM,IAAI9B,KAAKD,GAQ3BS,KAAKiC,YAAcsC,EACbA,EAAKE,kBACLD,EAAKA,EAAGC,kBAAoB,EAElCzE,KAAKoB,MAAMsD,SAASH,EAAOA,EAAKI,KAAO,EAAGJ,EAAOA,EAAKK,OAAS,GAC/D5E,KAAKsB,IAAIoD,SAASF,EAAKA,EAAGG,KAAO,GAAIH,EAAKA,EAAGI,OAAS,GAEtD5E,KAAKqB,SAAWuC,EAAaW,EACnBA,EAAKV,IACLW,EAAKA,EAAGX,IAAM,GAExB7D,KAAK2B,MAAQf,OAAAzC,EAAA,EAAAyC,CAAmBZ,KAAKiC,aAxClCtC,eAAekE,EAAU5B,GAC5B,OAAO,IAAIqC,EAAc,CACrBK,KAAM,EACNC,OAAQ,EACRH,kBAAmBxC,EACnB4C,OAAQ,EACRhB,QAIDlE,iBAAiB4E,EAAuBC,GAC3C,OAAO,IAAIF,EAAc,CACrBK,KAAM,EACNC,OAAQ,EACRH,kBAAmBF,EAAOA,EAAKE,kBAAoBD,EAAGC,kBACtDI,OAAQ,EACRhB,IAAKW,EAAGX,KACTW,ICyFI,IAAAM,EAAAlE,OAAAmE,EAAA,WAAAnE,CAlFqBoE,IACzB,CACHC,MAAO,CACHvC,QAA8B,EAArBsC,EAAME,QAAQC,KACvBrF,MAAO,OAEPsF,iBAAoB,CAChBC,KAAML,EAAMM,QAAQvD,KAAKwD,SAG7BC,SAAY,CACRH,KAAML,EAAMM,QAAQvD,KAAKwD,QACzBE,SAAU,WAsEX,CA1D2CC,IACtD,MAAMC,QAAEA,EAAOC,KAAEA,EAAI7F,OAAEA,EAAM8F,OAAEA,GAAWH,EACpCI,EAAMC,EAAA5G,EAAM6G,aACXC,EAAQC,GA9DG,MAClB,MAAOJ,EAAKG,GAAUF,EAAA5G,EAAMgH,SAAgC,OAErDD,EAAYE,GAAiBL,EAAA5G,EAAMgH,SAAS,CAC/CrG,MAAOgG,EAAMA,EAAInF,YAAc,EAC/BZ,OAAQ+F,EAAMA,EAAIpF,aAAe,IAGrC,SAAS2F,EAAiBC,GACtBF,EAAc,CACVtG,MAAOwG,EAAQA,EAAM3F,YAAc,EACnCZ,OAAQuG,EAAQA,EAAM5F,aAAe,IAqB7C,OAhBAqF,EAAA5G,EAAMoH,UAAU,KACZ,GAAW,MAAPT,EAAa,CACbO,EAAiBP,GAEjB,MAAMU,EAAO,CAAEC,GAAa7F,OAAA8F,EAAA,SAAA9F,CAAS,KACjCyF,EAAiBI,IAClB,KAFU,CAEJX,GAIT,OAFAa,OAAOC,iBAAiB,SAAUJ,GAE3B,KACHG,OAAOE,oBAAoB,SAAUL,MAG9C,CAACV,IAEG,CAACG,EAAQC,IA8BaY,GAoD7B,OAlDAf,EAAA5G,EAAMoH,UAAU,KACZ,GAAmB,MAAfT,EAAIiB,QAAiB,CACrB,MAAM9B,EAAQ,IAAIvF,EAAaoG,EAAIiB,QAASlB,EACvCK,EAAmBpG,MACnBoG,EAAmBnG,QAElBiH,EAAyB,GAG/B,CAAClD,EAAA,EAAIE,OAAQF,EAAA,EAAIG,QAASH,EAAA,EAAII,UAAWJ,EAAA,EAAIK,SAAUL,EAAA,EAAIM,OAAQN,EAAA,EAAIO,SAAUP,EAAA,EAAIC,QAAQkD,QAASpD,IAElG,MAAMqD,UAAEA,EAASC,KAAEA,GAASvG,OAAAwG,EAAA,EAAAxG,CAAYA,OAAAyG,OAAA,GAAMzB,EAAI,CAAE0B,SAAU1G,OAAAwG,EAAA,EAAAxG,CAAcgF,EAAK0B,YAAazD,GAE9F,GAAyB,IAArBqD,EAAUhE,OAAc,CACxB,GAAY,MAARiE,EAAgB,OAGpB,YADAH,EAAMO,KAAKjD,EAAckD,QAAQ3D,EAAKsD,EAAK1C,oBAGxC,GAAyB,IAArByC,EAAUhE,QAAwB,MAARiE,EAEjC,YADAH,EAAMO,KAAKjD,EAAckD,QAAQ3D,EAAKqD,EAAU,GAAGzC,oBAIvD,IAAIgD,EAAmC,KAEvCP,EAAUD,QAASF,IACC,MAAZU,EACAT,EAAMO,KAAKjD,EAAcoD,UAAUP,EAAyBJ,IAE5DC,EAAMO,KAAK,IAAIjD,EAAcmD,EAAUV,IAG3CU,EAAWV,IAGC,MAAZU,GAEAT,EAAMO,KAAK,IAAIjD,EAAcmD,MAIrCxC,EAAMjE,KAAKgG,KAEhB,CAACpB,EAAMM,IAEVH,EAAA5G,EAAMoH,UAAU,KACXN,EAAeH,EAAIiB,UACrB,CAACjB,IAEIC,EAAA5G,EAAAwI,cAAA,OAAKC,MAAO,CAAE7H,OAAQA,GAAU,KAAO8H,UAAWlC,EAAQV,MAAOa,IAAKA,MC3HlF9H,EAAAC,EAAAC,EAAA,iCAAAkJ,EAAA,IACelJ,EAAA","file":"3.js","sourcesContent":["import amber from \"@material-ui/core/colors/amber\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport deepOrange from \"@material-ui/core/colors/deepOrange\";\nimport green from \"@material-ui/core/colors/green\";\n\nexport function slotTemperature(val: number, min: number, max: number, a: number, b: number) {\n    //        (b-a)(x - min)\n    // f(x) = -------------- +  a\n    //        max - min\n    //\n    return Math.floor(\n        (((b - a) * (val - min)) /\n        (max - min))\n        + a,\n    );\n}\n\nexport const temperatureToColor = (n: number) => {\n    // project 16 ... 24 to 200 ... 900\n    const shade = Math.round(slotTemperature(\n        Math.min(Math.max(16, n), 24),\n        16, 24,\n        1, 8) * 100 + 100);\n\n    if (n <= 16) {\n        return blue[shade];\n    }\n\n    if (n <= 18.5) {\n        return green[shade];\n    }\n\n    if (n <= 20.5) {\n        return amber[shade];\n    }\n\n    return deepOrange[shade];\n};\n","/**\n * Inspired by https://github.com/dk8996/Gantt-Chart\n */\n\nimport * as d3 from \"d3\";\nimport { Axis, ScaleBand, ScaleTime } from \"d3\";\nimport translate from \"../../i18n/Translation\";\nimport { SeriesElement } from \"./SeriesElement\";\n\nexport const MIN_DATE = new Date(1979, 1, 29, 0, 0, 0, 0);\nexport const MAX_DATE = new Date(1979, 1, 30, 0, 0, 0, 0);\n\nexport class SVGGenerator {\n    public tickFormat: string = \"%H:%M\";\n    public margin = {\n        top: 0,\n        right: 16,\n        bottom: 16,\n        left: 28,\n    };\n\n    private minTime: Date;\n    private maxTime: Date;\n\n    private height: number;\n    private width: number;\n\n    private xScale!: ScaleTime<number, number>;\n    private yScale!: ScaleBand<string>;\n\n    private xAxis!: Axis<any>;\n    private yAxis!: Axis<string>;\n\n    private series: string[] = [];\n\n    constructor(\n        private rootElement: HTMLElement, private showLegend = true,\n        width?: number, height?: number) {\n        this.minTime = MIN_DATE;\n        this.maxTime = MAX_DATE;\n\n        if (!this.showLegend) {\n            this.margin = {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n            };\n        }\n\n        this.height = (height ? height : rootElement.clientHeight) - this.margin.top - this.margin.bottom;\n        this.width = (width ? width : rootElement.clientWidth) - 32 - this.margin.right - this.margin.left;\n\n        this.series = [\n            translate(\"schedule.Monday\"),\n            translate(\"schedule.Tuesday\"),\n            translate(\"schedule.Wednesday\"),\n            translate(\"schedule.Thursday\"),\n            translate(\"schedule.Friday\"),\n            translate(\"schedule.Saturday\"),\n            translate(\"schedule.Sunday\"),\n        ];\n\n        this.initAxis();\n        this.createChart(true);\n    }\n\n    public data(data: SeriesElement[]) {\n        const svg = this.createChart(false);\n        const chart = svg.select(\".chart\");\n\n        const allData = chart.selectAll(\"g\").data<SeriesElement>(\n            // @ts-ignore\n            data, (d: SeriesElement) => d.start + d.taskName + d.end);\n\n        const timeslot = allData.enter()\n            .insert(\"g\")\n            .attr(\"fill\", (d: SeriesElement) => d.color)\n            .attr(\"transform\", (d: SeriesElement) => \"translate(\" + this.xScale(d.start) + \",\" + this.yScale(d.taskName) + \")\");\n\n        timeslot.insert(\"rect\")\n            .attr(\"height\", this.yScale.bandwidth)\n            .attr(\"width\", (d: SeriesElement) => {\n                return Math.max(1, (this.xScale(d.end) - this.xScale(d.start)));\n            });\n\n        if (this.showLegend) {\n            const text = timeslot.insert(\"text\")\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"x\", 6)\n                .attr(\"y\", 20)\n                .attr(\"width\", (d: SeriesElement) => {\n                    return Math.max(1, (this.xScale(d.end) - this.xScale(d.start) - 6));\n                })\n                .text((d: SeriesElement) => this.fixedDigits(d.temperature, 1));\n\n            this.dotme(text);\n        }\n        allData.exit().remove();\n    }\n\n    private initAxis() {\n        this.xScale = d3.scaleTime()\n            .domain([this.minTime, this.maxTime])\n            .range([0, this.width])\n            .clamp(true); // cut off longer entries (should not happen)\n\n        this.yScale = d3.scaleBand()\n            .domain(this.series)\n            .rangeRound([0, this.height - this.margin.top - this.margin.bottom])\n            .padding(this.showLegend ? .1 : 0); // some space between\n\n        this.xAxis = d3.axisBottom(this.xScale)\n            // @ts-ignore\n            .tickFormat(d3.timeFormat(this.tickFormat))\n            .tickSize(this.showLegend ? 8 : 0)\n            .tickPadding(this.showLegend ? 8 : 0);\n\n        this.yAxis = d3\n            .axisLeft(this.yScale)\n            .tickPadding(this.showLegend ? 8 : 0)\n            .tickSize(0); // no ticks\n    }\n\n    private dotme(textNode: any) {\n        textNode.each(function() {\n            // @ts-ignore\n            const text = d3.select(this);\n            const width = parseInt(text.attr(\"width\"), 10);\n\n            if (text.text().length * (27 / 4 /* per character */) > width) {\n                text.text(\"\");\n            }\n        });\n    }\n\n    private fixedDigits(value: number, digits: number) {\n        return (Math.round(value * Math.pow(10, digits)) / Math.pow(10, digits)).toFixed(digits);\n    }\n\n    private createChart(init: boolean) {\n        let svg = d3.select(this.rootElement).select(\"svg\");\n        if (init) { svg.remove(); }\n\n        if (svg.empty()) {\n            // @ts-ignore\n            svg = d3.select(this.rootElement)\n                .append(\"svg\")\n                .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n\n            svg.append(\"g\")\n                .attr(\"class\", \"chart\")\n                .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                .attr(\"height\", this.height + this.margin.top + this.margin.bottom)\n                .attr(\"transform\", \"translate(\" + this.margin.left + \", \" + this.margin.top + \")\");\n\n            if (this.showLegend) {\n                svg.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(\" + this.margin.left + \", \" + (this.height - this.margin.top - this.margin.bottom) + \")\")\n                    .call(this.xAxis);\n\n                svg.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + this.margin.left + \", 0)\")\n                    .call(this.yAxis);\n            }\n        }\n\n        return svg;\n    }\n}\n","import { Day } from \"../../../app/model\";\nimport translate from \"../../i18n/Translation\";\nimport { IndexedSetPoint } from \"../../state/PlanReducer\";\nimport { temperatureToColor } from \"../temperatureToColor\";\nimport { MIN_DATE } from \"./SVGGenerator\";\n\nconst translateDay = (day: Day) => {\n    switch (day) {\n        case Day.Sunday: return translate(\"schedule.Sunday\");\n        case Day.Monday: return translate(\"schedule.Monday\");\n        case Day.Tuesday: return translate(\"schedule.Tuesday\");\n        case Day.Wednesday: return translate(\"schedule.Wednesday\");\n        case Day.Thursday: return translate(\"schedule.Thursday\");\n        case Day.Friday: return translate(\"schedule.Friday\");\n        case Day.Saturday: return translate(\"schedule.Saturday\");\n        default: return \"XX\";\n    }\n};\n\nexport class SeriesElement {\n    public static fullDay(day: Day, temperature: number) {\n        return new SeriesElement({\n            hour: 0,\n            minute: 0,\n            targetTemperature: temperature,\n            index: -1,\n            day,\n        });\n    }\n\n    public static firstHalf(from: IndexedSetPoint, to: IndexedSetPoint) {\n        return new SeriesElement({\n            hour: 0,\n            minute: 0,\n            targetTemperature: from ? from.targetTemperature : to.targetTemperature,\n            index: -1,\n            day: to.day,\n        }, to);\n    }\n\n    public readonly start = new Date(MIN_DATE);\n    public readonly end = new Date(MIN_DATE);\n\n    public readonly temperature: number;\n    public readonly taskName: string;\n\n    public readonly color: string;\n\n    constructor(from?: IndexedSetPoint, to?: IndexedSetPoint) {\n        this.temperature = from\n            ? from.targetTemperature\n            : to ? to.targetTemperature : 0;\n\n        this.start.setHours(from ? from.hour : 0, from ? from.minute : 0);\n        this.end.setHours(to ? to.hour : 24, to ? to.minute : 0);\n\n        this.taskName = translateDay(from\n                ? from.day\n                : to ? to.day : 0);\n\n        this.color = temperatureToColor(this.temperature);\n    }\n}\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport { debounce } from \"lodash\";\nimport React from \"react\";\nimport { Day, IHeatingPlan } from \"../../../app/model\";\nimport { calculateDay, sortSchedules } from \"../../state/calculateDay\";\nimport { IndexedSetPoint } from \"../../state/PlanReducer\";\nimport { SeriesElement } from \"./SeriesElement\";\nimport { SVGGenerator } from \"./SVGGenerator\";\n\nconst useDimensions = () => {\n    const [ref, setRef] = React.useState<HTMLDivElement | null>(null);\n\n    const [dimensions, setDimensions] = React.useState({\n        width: ref ? ref.clientWidth : 0,\n        height: ref ? ref.clientHeight : 0,\n    });\n\n    function updateDimensions(inner: HTMLDivElement) {\n        setDimensions({\n            width: inner ? inner.clientWidth : 0,\n            height: inner ? inner.clientHeight : 0,\n        });\n    }\n\n    // @ts-ignore\n    React.useEffect(() => {\n        if (ref != null) {\n            updateDimensions(ref);\n\n            const func = ((savedRef) => debounce(() => {\n                updateDimensions(savedRef);\n            }, 300))(ref);\n\n            window.addEventListener(\"resize\", func);\n\n            return () => {\n                window.removeEventListener(\"resize\", func);\n            };\n        }\n    }, [ref]);\n\n    return [setRef, dimensions];\n};\n\nconst styles: StyleRulesCallback = (theme) => {\n    return {\n        chart: {\n            padding: theme.spacing.unit * 2,\n            width: \"100%\",\n\n            [\"& .axis domain\"]: {\n                fill: theme.palette.text.primary,\n            },\n\n            [\"& text\"]: {\n                fill: theme.palette.text.primary,\n                fontSize: \"12px\",\n            },\n        },\n    };\n};\n\ntype Props = {\n    plan: IHeatingPlan,\n    height?: number,\n    legend?: boolean,\n} & WithStyles<typeof styles>;\n\nconst TemperatureChart: React.FunctionComponent<Props> = (props) => {\n    const { classes, plan, height, legend } = props;\n    const ref = React.createRef<HTMLDivElement>();\n    const [setRef, dimensions] = useDimensions();\n\n    React.useEffect(() => {\n        if (ref.current != null) {\n            const chart = new SVGGenerator(ref.current, legend,\n                (dimensions as any).width,\n                (dimensions as any).height);\n\n            const tasks: SeriesElement[] = [];\n\n            // setpoints get translated to [from - to]\n            [Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday, Day.Sunday].forEach((day) => {\n                // schedules need to be sorted\n                const { schedules, last } = calculateDay({ ...plan, schedule: sortSchedules(plan.schedule) }, day);\n\n                if (schedules.length === 0) {\n                    if (last == null) { return; }\n\n                    tasks.push(SeriesElement.fullDay(day, last.targetTemperature));\n                    return;\n                    // only one setpoint\n                } else if (schedules.length === 1 && last == null) {\n                    tasks.push(SeriesElement.fullDay(day, schedules[0].targetTemperature));\n                    return;\n                }\n\n                let previous: IndexedSetPoint | null = null;\n\n                schedules.forEach((current) => {\n                    if (previous == null) {\n                        tasks.push(SeriesElement.firstHalf(last as IndexedSetPoint, current));\n                    } else {\n                        tasks.push(new SeriesElement(previous, current));\n                    }\n\n                    previous = current;\n                });\n\n                if (previous != null) {\n                    // until eod\n                    tasks.push(new SeriesElement(previous));\n                }\n            });\n\n            chart.data(tasks);\n        }\n    }, [plan, dimensions]);\n\n    React.useEffect(() => {\n        (setRef as any)(ref.current);\n    }, [ref]);\n\n    return (<div style={{ height: height || 300 }} className={classes.chart} ref={ref} />);\n};\n\nexport default withStyles(styles)(TemperatureChart);\n","import Component from \"./Component\";\nexport default Component;\n\nexport { calculateDay } from \"../../state/calculateDay\";\n"],"sourceRoot":""}
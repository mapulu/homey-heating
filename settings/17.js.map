{"version":3,"sources":["webpack:///./dialogs/CloneDialog.tsx"],"names":["__webpack_require__","r","__webpack_exports__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_1___default","_material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_DialogContentText__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_DialogContentText__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_6___default","react__WEBPACK_IMPORTED_MODULE_7__","react__WEBPACK_IMPORTED_MODULE_7___default","_components_Transition__WEBPACK_IMPORTED_MODULE_8__","_i18n_Translation__WEBPACK_IMPORTED_MODULE_9__","props","name","setName","a","useState","useEffect","open","createElement","onClose","onCancel","TransitionComponent","Object","autoFocus","required","margin","id","label","placeholder","value","onChange","evt","target","fullWidth","onClick","color","onConfirm","disabled"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAAK,EAAAC,GAAAE,EAAAR,EAAA,KAAAS,EAAAT,EAAAK,EAAAG,GAAAE,EAAAV,EAAA,IAAAW,EAAAX,EAAAK,EAAAK,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAAK,EAAAO,GAAAE,EAAAd,EAAA,IAAAe,EAAAf,EAAAK,EAAAS,GAAAE,EAAAhB,EAAA,KAAAiB,EAAAjB,EAAAK,EAAAW,GAAAE,EAAAlB,EAAA,GAAAmB,EAAAnB,EAAAK,EAAAa,GAAAE,EAAApB,EAAA,KAAAqB,EAAArB,EAAA,IA0DeE,EAAA,QAxCqC,CAACoB,IACnD,MAAOC,EAAMC,GAAWL,EAAAM,EAAMC,SAAS,IAMvC,OAJAP,EAAAM,EAAME,UAAU,KACdH,EAAQ,KACP,CAACF,EAAMM,OAGRT,EAAAM,EAAAI,cAACtB,EAAAkB,EAAM,CAACG,KAAMN,EAAMM,KAAME,QAAS,KAAQR,EAAMS,YAAeC,oBAAqBZ,EAAA,GACnFD,EAAAM,EAAAI,cAACd,EAAAU,EAAW,KAAEQ,OAAAZ,EAAA,EAAAY,CAAU,gBACxBd,EAAAM,EAAAI,cAAClB,EAAAc,EAAa,KACZN,EAAAM,EAAAI,cAAChB,EAAAY,EAAiB,KACfQ,OAAAZ,EAAA,EAAAY,CAAU,aAAc,CAAEV,KAAMD,EAAMC,QAGzCJ,EAAAM,EAAAI,cAACZ,EAAAQ,EAAS,CACRS,WAAW,EACXC,UAAU,EACVC,OAAO,QACPC,GAAG,OACHC,MAAOL,OAAAZ,EAAA,EAAAY,CAAU,oBACjBM,YAAaN,OAAAZ,EAAA,EAAAY,CAAU,0BACvBO,MAAOjB,EACPkB,SAAWC,IAAUlB,EAAQkB,EAAIC,OAAOH,QACxCI,WAAW,KAGfzB,EAAAM,EAAAI,cAACpB,EAAAgB,EAAa,KACZN,EAAAM,EAAAI,cAACzB,EAAAqB,EAAM,CAACoB,QAAS,KAAQvB,EAAMS,YAAee,MAAM,WACjDb,OAAAZ,EAAA,EAAAY,CAAU,iBAGbd,EAAAM,EAAAI,cAACzB,EAAAqB,EAAM,CAACoB,QAAS,KAAQvB,EAAMyB,UAAUxB,IAAUyB,SAAmB,KAATzB,EAAauB,MAAM,WAC7Eb,OAAAZ,EAAA,EAAAY,CAAU","file":"17.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport Transition from \"../components/Transition\";\nimport translate from \"../i18n/Translation\";\n\ntype Props = {\n  open: boolean;\n  name?: string;\n  onConfirm: (name: string) => void;\n  onCancel: () => void;\n};\n\nconst CloneDialog: React.FunctionComponent<Props> = (props: Props) => {\n  const [name, setName] = React.useState(\"\");\n\n  React.useEffect(() => {\n    setName(\"\");\n  }, [props.open]);\n\n  return (\n    <Dialog open={props.open} onClose={() => { props.onCancel(); }} TransitionComponent={Transition}>\n      <DialogTitle>{translate(\"clone.title\")}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {translate(\"clone.text\", { name: props.name })}\n        </DialogContentText>\n\n        <TextField\n          autoFocus={true}\n          required={true}\n          margin=\"dense\"\n          id=\"name\"\n          label={translate(\"clone.name.label\")}\n          placeholder={translate(\"clone.name.placeholder\")}\n          value={name}\n          onChange={(evt) => { setName(evt.target.value); }}\n          fullWidth={true}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => { props.onCancel(); }} color=\"primary\">\n          {translate(\"clone.cancel\")}\n        </Button>\n\n        <Button onClick={() => { props.onConfirm(name); }} disabled={name === \"\"} color=\"primary\">\n          {translate(\"clone.ok\")}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CloneDialog;\n"],"sourceRoot":""}